{"remainingRequest":"/Users/syj/Git-Portal/AchieveIt-web/node_modules/babel-loader/lib/index.js!/Users/syj/Git-Portal/AchieveIt-web/node_modules/eslint-loader/index.js??ref--13-0!/Users/syj/Git-Portal/AchieveIt-web/src/sys/utils/sse.js","dependencies":[{"path":"/Users/syj/Git-Portal/AchieveIt-web/src/sys/utils/sse.js","mtime":1583737757309},{"path":"/Users/syj/Git-Portal/AchieveIt-web/node_modules/cache-loader/dist/cjs.js","mtime":1583737753486},{"path":"/Users/syj/Git-Portal/AchieveIt-web/node_modules/babel-loader/lib/index.js","mtime":1583737753370},{"path":"/Users/syj/Git-Portal/AchieveIt-web/node_modules/eslint-loader/index.js","mtime":1583737754281}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Vue from 'vue'; // import EventSourcePolyfill from 'event-source-polyfill'\n\nimport 'event-source-polyfill/src/eventsource';\nimport { getToken } from './cookie';\nimport store from '../../store';\n\nvar Sse =\n/*#__PURE__*/\nfunction () {\n  /**\n   * 需在vuex中确认有user对象后才能初始化，否则不连接服务器\n   * 注意： sse单独走自己的请求路线，不与axios重合，所以axios里面的配置在此处失效\n   * @param {string} url sse全路径\n   * @param {Array} events 当前用户可监听的路径\n   */\n  function Sse(url, events) {\n    var _this = this;\n\n    _classCallCheck(this, Sse);\n\n    _defineProperty(this, \"source\", null);\n\n    /* eslint-disable no-undef */\n    console.log(url, events);\n    this.source = new EventSourcePolyfill(url, {\n      headers: {\n        Authorization: getToken('access_token')\n      }\n    });\n    this.open();\n    events.forEach(function (event) {\n      _this.addEventListener(event);\n    });\n  }\n\n  _createClass(Sse, [{\n    key: \"open\",\n    value: function open() {\n      this.source.onopen = function (event) {\n        console.log('sse opened', event);\n      };\n    }\n  }, {\n    key: \"error\",\n    value: function error() {\n      this.source.onerror = function (event) {\n        console.log('error', event);\n      };\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(eventName) {\n      this.source.addEventListener(eventName, function (event) {\n        // console.log('receive one message: ', event.data)\n        // console.log('receive one message: ', event.lastEventId)\n        store.commit('ADD_UNREAD_MESSAGE', {\n          data: event.data,\n          id: event.lastEventId\n        });\n        Vue.prototype.$notify({\n          title: '您有新的消息',\n          dangerouslyUseHTMLString: true,\n          message: \"<strong class=\\\"my-notify\\\">\".concat(JSON.parse(event.data).message, \"</strong>\")\n        });\n      });\n    }\n  }]);\n\n  return Sse;\n}();\n\nexport { Sse as default };",{"version":3,"sources":["/Users/syj/Git-Portal/AchieveIt-web/src/sys/utils/sse.js"],"names":["Vue","getToken","store","Sse","url","events","console","log","source","EventSourcePolyfill","headers","Authorization","open","forEach","event","addEventListener","onopen","onerror","eventName","commit","data","id","lastEventId","prototype","$notify","title","dangerouslyUseHTMLString","message","JSON","parse"],"mappings":";;;;;;;;AAAA,OAAOA,GAAP,MAAgB,KAAhB,C,CACA;;AACA,OAAO,uCAAP;AACA,SAASC,QAAT,QAAyB,UAAzB;AACA,OAAOC,KAAP,MAAkB,aAAlB;;IAEqBC,G;;;AAGnB;;;;;;AAMA,eAAYC,GAAZ,EAAiBC,MAAjB,EAAyB;AAAA;;AAAA;;AAAA,oCARhB,IAQgB;;AACvB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ,EAAiBC,MAAjB;AACA,SAAKG,MAAL,GAAc,IAAIC,mBAAJ,CAAwBL,GAAxB,EAA6B;AACzCM,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAEV,QAAQ,CAAC,cAAD;AADhB;AADgC,KAA7B,CAAd;AAKA,SAAKW,IAAL;AAEAP,IAAAA,MAAM,CAACQ,OAAP,CAAe,UAAAC,KAAK,EAAI;AACtB,MAAA,KAAI,CAACC,gBAAL,CAAsBD,KAAtB;AACD,KAFD;AAGD;;;;2BAEM;AACL,WAAKN,MAAL,CAAYQ,MAAZ,GAAqB,UAAAF,KAAK,EAAI;AAC5BR,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BO,KAA1B;AACD,OAFD;AAGD;;;4BAEO;AACN,WAAKN,MAAL,CAAYS,OAAZ,GAAsB,UAAAH,KAAK,EAAI;AAC7BR,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBO,KAArB;AACD,OAFD;AAGD;;;qCAEgBI,S,EAAW;AAC1B,WAAKV,MAAL,CAAYO,gBAAZ,CAA6BG,SAA7B,EAAwC,UAAAJ,KAAK,EAAI;AAC/C;AACA;AACAZ,QAAAA,KAAK,CAACiB,MAAN,CAAa,oBAAb,EAAmC;AAAEC,UAAAA,IAAI,EAAEN,KAAK,CAACM,IAAd;AAAoBC,UAAAA,EAAE,EAAEP,KAAK,CAACQ;AAA9B,SAAnC;AACAtB,QAAAA,GAAG,CAACuB,SAAJ,CAAcC,OAAd,CAAsB;AACpBC,UAAAA,KAAK,EAAE,QADa;AAEpBC,UAAAA,wBAAwB,EAAE,IAFN;AAGpBC,UAAAA,OAAO,wCAA+BC,IAAI,CAACC,KAAL,CAAWf,KAAK,CAACM,IAAjB,EAAuBO,OAAtD;AAHa,SAAtB;AAKD,OATD;AAUD;;;;;;SA/CkBxB,G","sourcesContent":["import Vue from 'vue'\n// import EventSourcePolyfill from 'event-source-polyfill'\nimport 'event-source-polyfill/src/eventsource'\nimport { getToken } from './cookie'\nimport store from '../../store'\n\nexport default class Sse {\n  source = null\n\n  /**\n   * 需在vuex中确认有user对象后才能初始化，否则不连接服务器\n   * 注意： sse单独走自己的请求路线，不与axios重合，所以axios里面的配置在此处失效\n   * @param {string} url sse全路径\n   * @param {Array} events 当前用户可监听的路径\n   */\n  constructor(url, events) {\n    /* eslint-disable no-undef */\n    console.log(url, events)\n    this.source = new EventSourcePolyfill(url, {\n      headers: {\n        Authorization: getToken('access_token'),\n      },\n    })\n    this.open()\n\n    events.forEach(event => {\n      this.addEventListener(event)\n    })\n  }\n\n  open() {\n    this.source.onopen = event => {\n      console.log('sse opened', event)\n    }\n  }\n\n  error() {\n    this.source.onerror = event => {\n      console.log('error', event)\n    }\n  }\n\n  addEventListener(eventName) {\n    this.source.addEventListener(eventName, event => {\n      // console.log('receive one message: ', event.data)\n      // console.log('receive one message: ', event.lastEventId)\n      store.commit('ADD_UNREAD_MESSAGE', { data: event.data, id: event.lastEventId })\n      Vue.prototype.$notify({\n        title: '您有新的消息',\n        dangerouslyUseHTMLString: true,\n        message: `<strong class=\"my-notify\">${JSON.parse(event.data).message}</strong>`,\n      })\n    })\n  }\n}\n"]}]}