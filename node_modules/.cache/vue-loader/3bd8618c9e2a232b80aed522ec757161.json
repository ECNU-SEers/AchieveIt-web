{"remainingRequest":"D:\\DownLoad\\git\\achieve\\AchieveIt-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\DownLoad\\git\\achieve\\AchieveIt-web\\src\\components\\base\\upload-imgs\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\DownLoad\\git\\achieve\\AchieveIt-web\\src\\components\\base\\upload-imgs\\index.vue","mtime":1584099524203},{"path":"D:\\DownLoad\\git\\achieve\\AchieveIt-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\DownLoad\\git\\achieve\\AchieveIt-web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\DownLoad\\git\\achieve\\AchieveIt-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\DownLoad\\git\\achieve\\AchieveIt-web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { getFileType, checkIsAnimated, isEmptyObj, createId } from './utils'\r\n\r\n/**\r\n * 本地图像通过验证后构造的信息对象\r\n * @typedef {Object<string, number, any>} LocalFileInfo\r\n * @property {string} localSrc 本地图像预览地址\r\n * @property {File} file 本地图像文件\r\n * @property {number} width 宽\r\n * @property {number} height 高\r\n * @property {string} name 文件名\r\n * @property {number} size 文件大小\r\n * @property {string} type 文件的媒体类型 (MIME)\r\n * @property {Date} lastModified 文件最后修改时间\r\n * @property {boolean} isAnimated 是否是动态图, 如果不进行检测则为 null\r\n */\r\n\r\n/**\r\n * 返回数据对象\r\n * 初始化的图片如果没有传入字段, 则值为空 null\r\n * @typedef {Object<string, number>} ReturnItem\r\n * @property {number|string} id 初始化数据的 id\r\n * @property {number|string} imgId 图像资源 id\r\n * @property {string} src 文件相对路径\r\n * @property {string} display 图像完整地址\r\n * @property {number} height 高\r\n * @property {number} width 宽\r\n * @property {string} fileName 文件名\r\n * @property {string} fileType 文件的媒体类型 (MIME), 针对部分文件类型做了检测\r\n * @property {boolean} isAnimated 是否是动态图, 如果不进行检测则为 null\r\n */\r\n\r\n/**\r\n * 返回数据对象\r\n * @typedef {Object} ValidateRule\r\n * @property {array|number} ratio 比例 [宽，高], 或者 宽/高 的数值\r\n * @property {number} width 宽度必需等于\r\n * @property {number} height 高度必需等于\r\n * @property {number} minWidth 最小宽\r\n * @property {number} minHeight 最小高\r\n * @property {number} minSize 最小 size（Mb)\r\n * @property {number} maxSize 最大 size（Mb)\r\n * @property {number} allowAnimated 是否允许上传动图, 0 不检测, 1 不允许动图, 2 只允许动图. 要检查此项, 需设置属性 animated-check 为 true\r\n */\r\n\r\nconst ONE_KB = 1024\r\nconst ONE_MB = ONE_KB * 1024\r\n\r\n/**\r\n * 创建项, 如不传入参数则创建空项\r\n * status 状态转换说明:\r\n *  - 如果不传入参数, 创建上传空项, status: input\r\n *  - 如果只传入 data, 不传入 oldData\r\n *    - data 是本地数据(数据中是否携带id), status: new\r\n *    - data 不是本地数据(来源可能是初始化或是其他), status 与原状态保持一致, 如果没有原状态就是 init\r\n *  - data 与 oldData 都传入\r\n *    - data 为本地数据, oldData 是 input/new, status: new\r\n *    - data 为本地数据, oldData 是 init/edit, status: edit\r\n *    - data 不是本地数据, status 与原状态保持一致, 如果没有原状态就是 init\r\n * @returns {Item}\r\n */\r\nfunction createItem(data = null, oldData = {}) {\r\n  let item = {\r\n    loading: false,\r\n    id: createId(),\r\n    status: 'input', // new/edit/del/init/input\r\n    src: '', // 图像相对地址\r\n    display: '', // 图像完整地址, 用于显示\r\n    imgId: '', // 图像资源 id\r\n  }\r\n  // 未传入data, 说明是单纯新建, 单纯新建的值是输入框状态\r\n  if (!data) {\r\n    return item\r\n  }\r\n  // 判断是否是本地图片\r\n  if (data.file && !data.id) {\r\n    if (!isEmptyObj(oldData)) {\r\n      // 如果旧数据状态是输入框, 则为新图片\r\n      if (oldData.status === 'input' || oldData.status === 'new') {\r\n        item.status = 'new'\r\n      }\r\n      // 如果旧数据状态是初始化 init, 则为修改\r\n      if (oldData.status === 'init' || oldData.status === 'edit') {\r\n        item.status = 'edit'\r\n      }\r\n    } else {\r\n      item.status = 'new'\r\n    }\r\n\r\n    // 本地数据初始化\r\n    item.id = oldData.id || item.id\r\n    item.src = ''\r\n    item.imgId = ''\r\n    item.display = data.localSrc || item.display\r\n    item = Object.assign({}, data, item)\r\n    return item\r\n  }\r\n\r\n  // 存在id, 说明是传入已存在数据\r\n  item.id = data.id\r\n  item.imgId = data.imgId || item.imgId\r\n  item.src = data.src || item.src\r\n  item.display = data.display || item.display\r\n  item.status = data.status || 'init'\r\n  item = Object.assign({}, data, item)\r\n  return item\r\n}\r\n\r\n/**\r\n * 获取范围类型限制的提示文本\r\n * @param {String} prx 提示前缀\r\n * @param {Number} min 范围下限\r\n * @param {Number} max 范围上限\r\n * @param {String} unit 单位\r\n */\r\nfunction getRangeTip(prx, min, max, unit = '') {\r\n  let str = prx\r\n  if (min && max) {\r\n    // 有范围限制\r\n    str += ` ${min}${unit}~${max}${unit}`\r\n  } else if (min) {\r\n    // 只有最小范围\r\n    str += ` ≥ ${min}${unit}`\r\n  } else if (max) {\r\n    // 只有最大范围\r\n    str += ` ≤ ${max}${unit}`\r\n  } else {\r\n    // 无限制\r\n    str += '无限制'\r\n  }\r\n  return str\r\n}\r\n\r\n/** for originUpload: 一次请求最多的文件数量 */\r\nconst uploadLimit = 10\r\n/** for originUpload: 文件对象缓存 */\r\nlet catchData = []\r\n/** for originUpload: 计时器缓存 */\r\nlet time\r\n\r\nexport default {\r\n  name: 'UploadImgs',\r\n  data() {\r\n    return {\r\n      itemList: [],\r\n      loading: false,\r\n      currentId: '', // 正在操作项的id\r\n      globalImgPriview: '$imagePreview', // 全局图片预览方法名\r\n    }\r\n  },\r\n  props: {\r\n    /** 每一项宽度 */\r\n    width: {\r\n      type: [Number, String],\r\n      default: 160,\r\n    },\r\n    /** 每一项高度 */\r\n    height: {\r\n      type: [Number, String],\r\n      default: 160,\r\n    },\r\n    /** 是否开启自动上传 */\r\n    autoUpload: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n    /** 初始化数据 */\r\n    value: {\r\n      type: Array,\r\n      default: () => [],\r\n    },\r\n    /** 接受的文件类型 */\r\n    accept: {\r\n      type: String,\r\n      default: 'image/*',\r\n    },\r\n    /** 最少图片数量 */\r\n    minNum: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n    /** 最多图片数量, 0 表示无限制 */\r\n    maxNum: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n    /** 是否可排序 */\r\n    sortable: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    /** 是否可预览 */\r\n    preview: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n    /** 是否可以一次多选 */\r\n    multiple: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    /** 图像验证规则 */\r\n    rules: {\r\n      type: [Object, Function],\r\n      default: () => ({\r\n        maxSize: 2,\r\n      }),\r\n    },\r\n    /** 是否禁用, 禁用后只可展示 不可进行编辑操作, 包括: 新增, 修改, 删除, 改变顺序 */\r\n    disabled: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    /** 上传前插入方法, 属于高级用法 */\r\n    beforeUpload: {\r\n      type: Function,\r\n      default: null,\r\n    },\r\n    /** 重写上传方法, 如果重写则覆盖组件内上传方法 */\r\n    remoteFuc: {\r\n      type: Function,\r\n      default: null,\r\n    },\r\n    /** 图像显示模式 */\r\n    fit: {\r\n      type: String,\r\n      default: 'contain',\r\n    },\r\n    /** 检测是否是动图 */\r\n    animatedCheck: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n  },\r\n  computed: {\r\n    /** 每项容器样式 */\r\n    boxStyle() {\r\n      const { width, height, disabled } = this\r\n      const style = {}\r\n      if (typeof width === 'number') {\r\n        style.width = `${width}px`\r\n      } else if (typeof width === 'string') {\r\n        style.width = width\r\n      }\r\n      if (typeof height === 'number') {\r\n        style.height = `${height}px`\r\n      } else if (typeof height === 'string') {\r\n        style.height = height\r\n      }\r\n      if (disabled) {\r\n        style.cursor = 'not-allowed'\r\n      } else {\r\n        style.cursor = 'pointer'\r\n      }\r\n\r\n      /** 提示字体最大尺寸 */\r\n      let fontSize = 12\r\n      /** 每行提示预设 */\r\n      const maxText = 8\r\n      if (typeof width === 'number' && width / maxText < fontSize) {\r\n        fontSize = (width / maxText).toFixed(2)\r\n      }\r\n      style.fontSize = `${fontSize}px`\r\n      style.textAlign = 'center'\r\n      style.position = 'relative'\r\n      style.display = 'flex'\r\n      style.alignItems = 'center'\r\n      style.justifyContent = 'center'\r\n      style.overflow = 'hidden'\r\n      style.lineHeight = '1.3'\r\n      style.flexDirection = 'column'\r\n\r\n      return style\r\n    },\r\n    /**\r\n     * 上传图像数量下限\r\n     * @returns {Number}\r\n     */\r\n    min() {\r\n      const { minNum } = this\r\n      return minNum < 0 ? 0 : parseInt(minNum, 10)\r\n    },\r\n    /**\r\n     * 上传图像数量上限\r\n     * @returns {Number}\r\n     */\r\n    max() {\r\n      const { min, maxNum } = this\r\n      // 兼容用最大值小于最小值情况\r\n      return maxNum < min ? min : parseInt(maxNum, 10)\r\n    },\r\n    /**\r\n     * 是否是固定数量(最小等于最大)\r\n     * @returns {Boolean}\r\n     */\r\n    isStable() {\r\n      const { min, max } = this\r\n      return max !== 0 && min === max\r\n    },\r\n    /** 构造图像规范提示 */\r\n    rulesTip() {\r\n      const { rules } = this\r\n      const tips = []\r\n\r\n      /** 图像验证规则 */\r\n      let basicRule\r\n      // 针对动态规则模式, 获取输入为空时的规则\r\n      // 动态规则 rule 为函数, 当选择图片后根据选择的图片生成校验规则\r\n      if (typeof rules === 'function') {\r\n        try {\r\n          basicRule = rules()\r\n        } catch (err) {\r\n          basicRule = {}\r\n        }\r\n      } else {\r\n        basicRule = rules || {}\r\n      }\r\n\r\n      // 宽高限制提示语\r\n      if (basicRule.width && basicRule.height) {\r\n        // 固定宽高限制\r\n        tips.push(`宽高 ${basicRule.width}x${basicRule.height}`)\r\n      } else if (basicRule.width) {\r\n        // 固定宽限制\r\n        tips.push(`宽度 ${basicRule.width}`)\r\n        tips.push(`${getRangeTip('高度', basicRule.minHeight, basicRule.maxHeight)}`)\r\n      } else if (basicRule.height) {\r\n        // 固定高限制\r\n        tips.push(`高度 ${basicRule.height}`)\r\n        tips.push(`${getRangeTip('宽度', basicRule.minWidth, basicRule.maxWidth)}`)\r\n      } else {\r\n        // 宽高都不固定\r\n        tips.push(`${getRangeTip('宽度', basicRule.minWidth, basicRule.maxWidth)}`)\r\n        tips.push(`${getRangeTip('高度', basicRule.minHeight, basicRule.maxHeight)}`)\r\n      }\r\n\r\n      // 宽高比限制提示语\r\n      if (basicRule.ratio) {\r\n        if (Array.isArray(basicRule.ratio)) {\r\n          tips.push(`宽高比 ${basicRule.ratio.join(':')}`)\r\n        } else {\r\n          tips.push(`宽高比 ${basicRule.ratio}`)\r\n        }\r\n      }\r\n\r\n      // 文件大小\r\n      if (basicRule.minSize || basicRule.maxSize) {\r\n        tips.push(getRangeTip('文件大小', basicRule.minSize, basicRule.maxSize, 'Mb'))\r\n      }\r\n\r\n      // 是否动态图\r\n      if (basicRule.allowAnimated && basicRule.allowAnimated > 0) {\r\n        if (basicRule.allowAnimated === 1) {\r\n          tips.push('不允许上传动图')\r\n        } else if (basicRule.allowAnimated === 1) {\r\n          tips.push('只允许上传动图')\r\n        }\r\n      }\r\n\r\n      return tips\r\n    },\r\n  },\r\n  watch: {\r\n    /** 初始化值修改时重新初始化, 并且清空当前的编辑状态 */\r\n    value(val) {\r\n      // 初始化数据\r\n      this.initItemList(val)\r\n    },\r\n  },\r\n  mounted() {\r\n    this.initItemList(this.value)\r\n  },\r\n  methods: {\r\n    /**\r\n     * 上传缓存中的图片\r\n     * @param {Array} uploadList 需要上传的缓存集合, 集合中包含回调函数\r\n     */\r\n    uploadCatch(uploadList) {\r\n      const data = {}\r\n      uploadList.forEach((item, index) => {\r\n        data[`file_${index}`] = item.img.file\r\n      })\r\n      return this.$axios({\r\n        method: 'post',\r\n        url: '/cms/file',\r\n        data,\r\n      })\r\n        .then(res => {\r\n          if (!Array.isArray(res) || res.length === 0) {\r\n            throw new Error('图像上传失败')\r\n          }\r\n\r\n          const resObj = res.reduce((acc, item) => {\r\n            acc[item.key] = item\r\n            return acc\r\n          }, {})\r\n\r\n          uploadList.forEach((item, index) => {\r\n            const remoteData = resObj[`file_${index}`]\r\n            item.cb(remoteData)\r\n          })\r\n        })\r\n        .catch(err => {\r\n          uploadList.forEach(item => {\r\n            item.cb(false)\r\n          })\r\n          let msg = '图像上传失败, 请重试'\r\n          if (err.message) {\r\n            // eslint-disable-next-line\r\n            msg = err.message\r\n          }\r\n          console.error(err)\r\n          this.$message.error(msg)\r\n        })\r\n    },\r\n    /**\r\n     * 内置上传文件方法, 使用 debounce 优化提交效率\r\n     * 此处只能使用回调模式, 因为涉及 debounce 处理, promise 不可在外部改变其状态\r\n     * @param {Object} img 需要上传的数据项\r\n     * @param {Function} cb 回调函数\r\n     */\r\n    originUpload(img, cb) {\r\n      // 并且一次最多上传文件数量设为可配置\r\n      // 添加缓存\r\n      catchData.push({\r\n        img,\r\n        cb,\r\n      })\r\n\r\n      // 等于上限, 立即上传\r\n      if (catchData.length === uploadLimit) {\r\n        const data = [...catchData]\r\n        catchData = []\r\n        clearTimeout(time)\r\n        time = null\r\n        return this.uploadCatch(data)\r\n      }\r\n\r\n      // 清除上次一的定时器\r\n      if (time && catchData.length < uploadLimit) {\r\n        clearTimeout(time)\r\n        // 此时修改上一个 promise 状态为reslove\r\n      }\r\n\r\n      // 等待100ms\r\n      time = setTimeout(() => {\r\n        this.uploadCatch([...catchData])\r\n        catchData = []\r\n        time = null\r\n      }, 50)\r\n    },\r\n    /**\r\n     * 上传图像文件\r\n     * @param {Object} 需要上传的项, 包含文化和其它信息\r\n     */\r\n    async uploadImg(item) {\r\n      // 远程结果处理\r\n      const reduceResult = (imgItem, res) => {\r\n        // eslint-disable-next-line\r\n        imgItem.loading = false\r\n        if (!res) {\r\n          return\r\n        }\r\n        // eslint-disable-next-line\r\n        imgItem.display = res.url\r\n        // eslint-disable-next-line\r\n        imgItem.src = res.path\r\n        // eslint-disable-next-line\r\n        imgItem.imgId = res.id\r\n        // eslint-disable-next-line\r\n        imgItem.file = null\r\n        window.URL.revokeObjectURL(imgItem.display)\r\n      }\r\n\r\n      if (item.status === 'input' || !item.file) {\r\n        return\r\n      }\r\n      // eslint-disable-next-line\r\n      item.loading = true\r\n      if (this.beforeUpload && typeof this.beforeUpload === 'function') {\r\n        if (typeof this.beforeUpload === 'function') {\r\n          const result = await new Promise(resolve => {\r\n            let beforeUploadResult\r\n            try {\r\n              beforeUploadResult = this.beforeUpload(item, data => {\r\n                resolve(!!data)\r\n              })\r\n            } catch (err) {\r\n              resolve(false)\r\n            }\r\n            // promise 模式\r\n            if (beforeUploadResult != null && typeof beforeUploadResult.then === 'function') {\r\n              beforeUploadResult\r\n                .then(remoteData => {\r\n                  resolve(!!remoteData)\r\n                })\r\n                .catch(() => {\r\n                  resolve(false)\r\n                })\r\n            }\r\n          })\r\n          if (!result) {\r\n            reduceResult(item, false)\r\n            return false\r\n          }\r\n        }\r\n      }\r\n      // 如果是用户自定义方法\r\n      // 出于简化 api 的考虑, 只允许单个文件上传, 不进行代理\r\n      if (this.remoteFuc && typeof this.remoteFuc === 'function') {\r\n        const result = await new Promise(resolve => {\r\n          let remoteFucResult\r\n          try {\r\n            remoteFucResult = this.remoteFuc(item.file, remoteData => {\r\n              resolve(remoteData || false)\r\n            })\r\n          } catch (err) {\r\n            this.$message.error('执行自定义上传出错')\r\n            resolve(false)\r\n          }\r\n          // promise 模式\r\n          if (remoteFucResult != null && typeof remoteFucResult.then === 'function') {\r\n            remoteFucResult\r\n              .then(remoteData => {\r\n                resolve(remoteData || false)\r\n              })\r\n              .catch(() => {\r\n                resolve(false)\r\n              })\r\n          }\r\n        })\r\n        reduceResult(item, result)\r\n        if (!result) {\r\n          return false\r\n        }\r\n        return item\r\n      }\r\n\r\n      // 使用内置上传\r\n      return new Promise(resolve => {\r\n        this.originUpload(item, data => {\r\n          reduceResult(item, data)\r\n          if (!data) {\r\n            resolve(false)\r\n          } else {\r\n            resolve(item)\r\n          }\r\n        })\r\n      })\r\n    },\r\n    /**\r\n     * 获取当前组件数据\r\n     */\r\n    async getValue() {\r\n      const { itemList, isStable, min } = this\r\n\r\n      // 检查是否有不符合要求的空项\r\n      const l = isStable ? itemList.length : itemList.length - 1\r\n      for (let i = 0; i < l; i += 1) {\r\n        if (itemList[i].status === 'input') {\r\n          this.$message.error('当前存在未选择图片, 请全部选择')\r\n          return false\r\n        }\r\n      }\r\n      if (l < min) {\r\n        this.$message.error(`至少选择${min}张图片`)\r\n        return false\r\n      }\r\n      // 提取需要上传文件\r\n      const asyncList = []\r\n\r\n      for (let i = 0; i < itemList.length; i += 1) {\r\n        // 跳过上传组件\r\n        if (itemList[i].status !== 'input') {\r\n          if (!itemList[i].file) {\r\n            asyncList.push(Promise.resolve(itemList[i]))\r\n          } else {\r\n            // 上传文件后获取对应key值\r\n            asyncList.push(this.uploadImg(itemList[i]))\r\n          }\r\n        }\r\n      }\r\n      const imgInfoList = await Promise.all(asyncList)\r\n      // const imgInfoList = this.itemList.filter(item => (item.status !== 'input'))\r\n\r\n      // 检查是否有上传失败的图像\r\n      // 如果有失败的上传, 则返回错误\r\n      if (imgInfoList.some(item => !item)) {\r\n        return false\r\n      }\r\n\r\n      // 如无错误, 表示图像都以上传, 开始构造数据\r\n      /**\r\n       * @type {array<ReturnItem>}\r\n       */\r\n      const result = imgInfoList.map(item => {\r\n        /** @type {ReturnItem} */\r\n        const val = {\r\n          id: item.status === 'new' ? '' : item.id,\r\n          imgId: item.imgId || null,\r\n          src: item.src || null,\r\n          display: item.display,\r\n          width: item.width || null,\r\n          height: item.height || null,\r\n          fileSize: item.size || null,\r\n          fileName: item.name || null,\r\n          fileType: item.type || null,\r\n          isAnimated: item.isAnimated || null,\r\n        }\r\n        return val\r\n      })\r\n      // 获取数据成功后发出\r\n      this.$emit('upload', result)\r\n      return result\r\n    },\r\n    /**\r\n     * 删除某项\r\n     * @param {Number|String} id 删除项 id\r\n     */\r\n    delItem(id) {\r\n      const { itemList, isStable } = this\r\n      // 根据id找到对应项\r\n      const index = itemList.findIndex(item => item.id === id)\r\n      const blobUrl = itemList[index].display\r\n      if (isStable) {\r\n        // 固定数量图片, 删除后留下空项\r\n        itemList[index] = createItem()\r\n        this.itemList = [...itemList]\r\n      } else {\r\n        itemList.splice(index, 1)\r\n      }\r\n      // 释放内存\r\n      window.URL.revokeObjectURL(blobUrl)\r\n      this.initItemList(this.itemList)\r\n    },\r\n    /**\r\n     * 预览图像\r\n     * @param {Object} data 需要预览的项的数据\r\n     * @param {Number} index 索引序号\r\n     */\r\n    previewImg(data, index) {\r\n      // 如果有全局预览方法\r\n      if (this[this.globalImgPriview]) {\r\n        const images = []\r\n        this.itemList.forEach(element => {\r\n          if (element.display) {\r\n            images.push(element.display)\r\n          }\r\n        })\r\n        this[this.globalImgPriview]({\r\n          images,\r\n          index,\r\n        })\r\n      } else {\r\n        // element 原生粗糙模式\r\n        this.$confirm(`<img src=\"${data.display}\" style=\"width: 100%;\" />`, '预览', {\r\n          dangerouslyUseHTMLString: true,\r\n        })\r\n      }\r\n    },\r\n    /**\r\n     * 移动图像位置\r\n     * @param {Number|String} id 操作项的 id\r\n     * @param {Number} step 移动的偏移量\r\n     */\r\n    move(id, step) {\r\n      const { itemList, isStable } = this\r\n      // 找到操作的元素\r\n      const index = itemList.findIndex(item => item.id === id)\r\n      // 边界检测\r\n      if (index + step < 0 || index + step >= itemList.length) return\r\n      // 非固定项时, 不可和最后一项输入换位子\r\n      if (!isStable && index + step === itemList.length - 1) {\r\n        if (itemList[itemList.length - 1].status === 'input') return\r\n      }\r\n      const i = itemList[index]\r\n      const j = itemList[index + step]\r\n      itemList[index] = j\r\n      itemList[index + step] = i\r\n      this.itemList = [...itemList]\r\n    },\r\n    /**\r\n     * 验证上传的图像是否符合要求\r\n     * @param {LocalFileInfo} imgInfo 图像信息, 包括文件名, 宽高\r\n     */\r\n    async validateImg(imgInfo) {\r\n      const { rules } = this\r\n      /** @type ValidateRule */\r\n      let rule\r\n      // 针对动态规则模式, 获取输入为空时的规则\r\n      // 动态规则 rule 为函数, 当选择图片后根据选择的图片生成校验规则\r\n      if (typeof rules === 'function') {\r\n        try {\r\n          rule = rules(imgInfo)\r\n        } catch (err) {\r\n          rule = {}\r\n        }\r\n      } else {\r\n        rule = rules\r\n      }\r\n\r\n      if (rule.allowAnimated && rule.allowAnimated > 0) {\r\n        if (imgInfo.isAnimated === null) {\r\n          this.$message.error('要进行是否动图验证需要配置 \"animated-check\" 属性为 true')\r\n        } else {\r\n          if (rule.allowAnimated === 1 && imgInfo.isAnimated) {\r\n            throw new Error(`\"${imgInfo.name}\"为动态图, 不允许上传`)\r\n          }\r\n          if (rule.allowAnimated === 2 && !imgInfo.isAnimated) {\r\n            throw new Error(`\"${imgInfo.name}\"为静态图, 只允许上传动态图`)\r\n          }\r\n        }\r\n      }\r\n\r\n      // 宽高限制\r\n      if (rule.width) {\r\n        if (imgInfo.width !== rule.width) {\r\n          throw new Error(`\"${imgInfo.name}\"图像宽不符合要求, 需为${rule.width}`)\r\n        }\r\n      } else {\r\n        if (rule.minWidth && imgInfo.width < rule.minWidth) {\r\n          throw new Error(`\"${imgInfo.name}\"图像宽不符合要求, 至少为${rule.minWidth}`)\r\n        }\r\n        if (rule.maxWidth && imgInfo.width > rule.maxWidth) {\r\n          throw new Error(`\"${imgInfo.name}\"图像宽不符合要求, 至多为${rule.maxWidth}`)\r\n        }\r\n      }\r\n      if (rule.height) {\r\n        if (imgInfo.height !== rule.height) {\r\n          throw new Error(`\"${imgInfo.name}\"图像高不符合要求, 需为${rule.height}`)\r\n        }\r\n      } else {\r\n        if (rule.minHeight && imgInfo.height < rule.minHeight) {\r\n          throw new Error(`\"${imgInfo.name}\"图像高不符合要求, 至少为${rule.minHeight}`)\r\n        }\r\n        if (rule.maxHeight && imgInfo.height > rule.maxHeight) {\r\n          throw new Error(`\"${imgInfo.name}\"图像高不符合要求, 至多为${rule.maxHeight}`)\r\n        }\r\n      }\r\n\r\n      // 宽高比限制提示语\r\n      if (rule.ratio) {\r\n        let ratio\r\n        if (Array.isArray(rule.ratio)) {\r\n          ratio = rule.ratio[0] / rule.ratio[1]\r\n        } else {\r\n          // eslint-disable-next-line\r\n          ratio = rule.ratio\r\n        }\r\n        ratio = ratio.toFixed(2)\r\n        if ((imgInfo.width / imgInfo.height).toFixed(2) !== ratio) {\r\n          throw new Error(`\"${imgInfo.name}\"图像宽高比不符合要求, 需为${ratio}`)\r\n        }\r\n      }\r\n\r\n      // 文件大小\r\n      if (rule.minSize && imgInfo.size < rule.minSize * ONE_MB) {\r\n        throw new Error(`\"${imgInfo.name}\"图像文件大小比不符合要求, 至少为${rule.minSize}Mb`)\r\n      }\r\n      if (rule.maxSize && imgInfo.size > rule.maxSize * ONE_MB) {\r\n        throw new Error(`\"${imgInfo.name}\"图像文件大小比不符合要求, 至多为${rule.maxSize}Mb`)\r\n      }\r\n\r\n      return true\r\n    },\r\n    /**\r\n     * 选择图像文件后处理, 包括获取图像信息, 验证图像等\r\n     * @param {Event} e input change 事件对象\r\n     */\r\n    async handleChange(e) {\r\n      const { currentId, autoUpload } = this\r\n      const { files } = e.target\r\n      let imgInfoList\r\n\r\n      if (!files) return\r\n      /** 中间步骤缓存, 在出错时用于释放 createObjectURL 的内存 */\r\n      let cache = []\r\n      /**\r\n       * 处理单个图片, 返回处理成功的图片数据\r\n       * @param {File} file 图片文件\r\n       */\r\n      const handleImg = async file => {\r\n        try {\r\n          // 获取图像信息\r\n          const info = await this.getImgInfo(file)\r\n          cache.push(info)\r\n          // 验证图像信息\r\n          await this.validateImg(info)\r\n          return info\r\n        } catch (err) {\r\n          // 往外抛异常\r\n          throw err\r\n        }\r\n      }\r\n      const asyncList = []\r\n      for (let i = 0; i < files.length; i += 1) {\r\n        asyncList.push(handleImg(files[i]))\r\n      }\r\n      try {\r\n        imgInfoList = await Promise.all(asyncList)\r\n        // 设置图片信息\r\n        this.setImgInfo(imgInfoList, currentId)\r\n        // 开启自动上传\r\n        if (autoUpload) {\r\n          this.itemList.forEach(ele => {\r\n            this.uploadImg(ele)\r\n          })\r\n        }\r\n      } catch (err) {\r\n        // 清空缓存\r\n        for (let i = 0; i < cache.length; i += 1) {\r\n          window.URL.revokeObjectURL(cache[i].localSrc)\r\n        }\r\n        cache = null\r\n        console.error(err)\r\n        this.$message.error(err.message)\r\n      }\r\n    },\r\n    /**\r\n     * 根据信息列表设置图像信息\r\n     * 用户选择图片, 图片通过验证后可获取到图像信息数组\r\n     * 将这一组图像信息数据设置在 itemList 中\r\n     * @param {Array<LocalFileInfo>} imgInfoList 需要设置的图像数组\r\n     * @param {Number|String} id 操作项的 id\r\n     */\r\n    setImgInfo(imgInfoList = [], currentId) {\r\n      const { max, itemList } = this\r\n      // 找到特定图像位置\r\n      const index = this.itemList.findIndex(item => item.id === currentId)\r\n      // 释放内存\r\n      window.URL.revokeObjectURL(this.itemList[index].display)\r\n      // 替换图片\r\n      this.itemList[index] = createItem(imgInfoList[0], this.itemList[index])\r\n\r\n      // 如果需要设置的图像数量大于1, 需要执行追加图片逻辑\r\n      if (imgInfoList.length > 1) {\r\n        // 最大图片数量限制\r\n        let l = imgInfoList.length\r\n        if (this.isStable) {\r\n          // 固定数量模式, 按次序插入空项\r\n          for (let i = 0, k = 1; i < max && k < l; i += 1) {\r\n            if (itemList[i].status === 'input') {\r\n              this.itemList[i] = createItem(imgInfoList[k])\r\n              k += 1\r\n            }\r\n          }\r\n        } else {\r\n          const empty = max - itemList.length\r\n          if (max && l > empty) {\r\n            l = empty\r\n          }\r\n          if (itemList[itemList.length - 1].status === 'input') {\r\n            this.itemList.pop()\r\n          }\r\n          for (let i = 1; i <= l; i += 1) {\r\n            this.itemList.push(createItem(imgInfoList[i]))\r\n          }\r\n        }\r\n      }\r\n\r\n      // 初始化图片\r\n      this.initItemList(this.itemList)\r\n    },\r\n    /**\r\n     * 支持键盘操作\r\n     * @param {Event} e 键盘事件对象\r\n     * @param {Number|String} id 操作项的 id\r\n     */\r\n    handleKeydown(e, id) {\r\n      if (e.target !== e.currentTarget) return\r\n      if (e.keyCode === 13 || e.keyCode === 32) {\r\n        this.handleClick(id)\r\n      }\r\n    },\r\n    /**\r\n     * 处理点击事件, 并转移到文件上传元素\r\n     * 并记录当前操作元素 id\r\n     * @param {Number|String} id 操作项的 id\r\n     */\r\n    handleClick(id) {\r\n      if (!this.disabled) {\r\n        this.currentId = id || ''\r\n        this.$refs.input.value = null\r\n        this.$refs.input.click()\r\n      }\r\n    },\r\n    /**\r\n     * 初始化 itemList\r\n     * @param {Array} val 初始化的数据数组\r\n     */\r\n    initItemList(val) {\r\n      const { max, isStable, disabled } = this\r\n      const result = []\r\n\r\n      // 初始值不存在情况\r\n      // 包括初始值不合法\r\n      if (!val || !Array.isArray(val) || val.length === 0) {\r\n        // 固定数量图像上传, 直接初始化固定数量的上传控件\r\n        if (isStable) {\r\n          for (let i = 0; i < max; i += 1) {\r\n            result.push(createItem())\r\n          }\r\n          this.itemList = result\r\n          return\r\n        }\r\n        // 如果不是固定上传数量, 则仅创建一个空项\r\n        result.push(createItem())\r\n        this.itemList = result\r\n        return\r\n      }\r\n\r\n      // 存在初始值\r\n      for (let i = 0; i < val.length; i += 1) {\r\n        result.push(createItem(val[i]))\r\n      }\r\n      // 初始项小于最大数量限制, 并且处于可编辑状态, 并且最后一项不是input\r\n      if ((max === 0 || val.length < max) && !disabled && val[val.length - 1].status !== 'input') {\r\n        // 后面添加空项\r\n        result.push(createItem())\r\n      }\r\n      this.itemList = result\r\n    },\r\n    /**\r\n     * 获取图像信息\r\n     * @param {File} file 文件对象\r\n     * @returns {LocalFileInfo} 信息对象\r\n     */\r\n    async getImgInfo(file) {\r\n      const { animatedCheck } = this\r\n      const localSrc = window.URL.createObjectURL(file)\r\n      // 严格检测文件类型\r\n      const fileType = await getFileType(file)\r\n      // 检测是否是动图\r\n      let isAnimated = null\r\n      if (animatedCheck) {\r\n        isAnimated = await checkIsAnimated({ file, fileType, fileUrl: localSrc })\r\n      }\r\n      return new Promise((resolve, reject) => {\r\n        let image = new Image()\r\n        image.src = localSrc\r\n        image.onload = () => {\r\n          /**\r\n           * @type {LocalFileInfo}\r\n           */\r\n          const localFileInfo = {\r\n            localSrc,\r\n            file,\r\n            width: image.width,\r\n            height: image.height,\r\n            name: file.name,\r\n            size: file.size,\r\n            type: fileType === 'unknow' ? file.type : fileType,\r\n            lastModified: file.lastModified,\r\n            isAnimated,\r\n          }\r\n          resolve(localFileInfo)\r\n          image = null\r\n        }\r\n        image.onerror = () => {\r\n          reject(new Error('图像加载失败'))\r\n          image = null\r\n        }\r\n      })\r\n    },\r\n    /** 清空全部图片 */\r\n    clear() {\r\n      this.initItemList([])\r\n      this.getValue()\r\n    },\r\n    /** 重置图片数据传入属性 */\r\n    reset() {\r\n      this.initItemList(this.value)\r\n    },\r\n  },\r\n}\r\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+EA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/components/base/upload-imgs","sourcesContent":["<!--\r\n Component: UploadImgs\r\n Describe: 多图片上传组件, 附有预览, 排序, 验证等功能\r\n\r\ntodo: 使用中间件模式优化信息装载和验证功能\r\ntodo: 文件判断使用 serveWorker 优化性能\r\n-->\r\n\r\n<template>\r\n  <div class=\"upload-imgs-container\" v-loading=\"loading\">\r\n    <template v-for=\"(item, i) in itemList\">\r\n      <template v-if=\"item.display\">\r\n        <div class=\"thumb-item\" :key=\"item.id\" :style=\"boxStyle\" v-loading=\"item.loading\">\r\n          <el-image class=\"thumb-item-img\" :src=\"item.display\" :fit=\"fit\" style=\"width: 100%; height: 100%;\"></el-image>\r\n          <div class=\"info\">\r\n            <i\r\n              v-if=\"item.file\"\r\n              class=\"el-icon-upload wait-upload\"\r\n              @click.prevent.stop=\"delItem(item.id)\"\r\n              title=\"等待上传\"\r\n            ></i>\r\n          </div>\r\n          <div class=\"control\">\r\n            <i v-if=\"!disabled\" class=\"el-icon-close del\" @click.prevent.stop=\"delItem(item.id)\" title=\"删除\"></i>\r\n            <div v-if=\"!disabled\" class=\"preview\" title=\"更换图片\" @click.prevent.stop=\"handleClick(item.id)\">\r\n              <i class=\"el-icon-edit\"></i>\r\n            </div>\r\n            <div class=\"control-bottom\" v-if=\"sortable || preview\">\r\n              <i\r\n                v-if=\"sortable && !disabled\"\r\n                title=\"前移\"\r\n                class=\"control-bottom-btn el-icon-back\"\r\n                :class=\"{ disabled: i === 0 }\"\r\n                @click.stop=\"move(item.id, -1)\"\r\n              ></i>\r\n              <i\r\n                v-if=\"preview\"\r\n                class=\"control-bottom-btn el-icon-view\"\r\n                title=\"预览\"\r\n                style=\"cursor: pointer;\"\r\n                @click.stop=\"previewImg(item, i)\"\r\n              ></i>\r\n              <i\r\n                v-if=\"sortable && !disabled\"\r\n                title=\"后移\"\r\n                class=\"control-bottom-btn el-icon-right\"\r\n                :class=\"{ disabled: i === itemList.length - 1 }\"\r\n                @click.stop=\"move(item.id, 1)\"\r\n              ></i>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </template>\r\n      <template v-else>\r\n        <div\r\n          class=\"upload-item\"\r\n          :class=\"{ disabled: disabled }\"\r\n          :key=\"item.id\"\r\n          :style=\"boxStyle\"\r\n          @click=\"handleClick(item.id)\"\r\n          @keydown=\"handleKeydown($event, item.id)\"\r\n        >\r\n          <i class=\"el-icon-plus\" style=\"font-size: 3em;\"></i>\r\n          <div v-html=\"rulesTip.join('<br>')\" style=\"margin-top: 1em;\"></div>\r\n        </div>\r\n      </template>\r\n    </template>\r\n    <input\r\n      class=\"upload-imgs__input\"\r\n      type=\"file\"\r\n      ref=\"input\"\r\n      @change=\"handleChange\"\r\n      :multiple=\"multiple\"\r\n      :accept=\"accept\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { getFileType, checkIsAnimated, isEmptyObj, createId } from './utils'\r\n\r\n/**\r\n * 本地图像通过验证后构造的信息对象\r\n * @typedef {Object<string, number, any>} LocalFileInfo\r\n * @property {string} localSrc 本地图像预览地址\r\n * @property {File} file 本地图像文件\r\n * @property {number} width 宽\r\n * @property {number} height 高\r\n * @property {string} name 文件名\r\n * @property {number} size 文件大小\r\n * @property {string} type 文件的媒体类型 (MIME)\r\n * @property {Date} lastModified 文件最后修改时间\r\n * @property {boolean} isAnimated 是否是动态图, 如果不进行检测则为 null\r\n */\r\n\r\n/**\r\n * 返回数据对象\r\n * 初始化的图片如果没有传入字段, 则值为空 null\r\n * @typedef {Object<string, number>} ReturnItem\r\n * @property {number|string} id 初始化数据的 id\r\n * @property {number|string} imgId 图像资源 id\r\n * @property {string} src 文件相对路径\r\n * @property {string} display 图像完整地址\r\n * @property {number} height 高\r\n * @property {number} width 宽\r\n * @property {string} fileName 文件名\r\n * @property {string} fileType 文件的媒体类型 (MIME), 针对部分文件类型做了检测\r\n * @property {boolean} isAnimated 是否是动态图, 如果不进行检测则为 null\r\n */\r\n\r\n/**\r\n * 返回数据对象\r\n * @typedef {Object} ValidateRule\r\n * @property {array|number} ratio 比例 [宽，高], 或者 宽/高 的数值\r\n * @property {number} width 宽度必需等于\r\n * @property {number} height 高度必需等于\r\n * @property {number} minWidth 最小宽\r\n * @property {number} minHeight 最小高\r\n * @property {number} minSize 最小 size（Mb)\r\n * @property {number} maxSize 最大 size（Mb)\r\n * @property {number} allowAnimated 是否允许上传动图, 0 不检测, 1 不允许动图, 2 只允许动图. 要检查此项, 需设置属性 animated-check 为 true\r\n */\r\n\r\nconst ONE_KB = 1024\r\nconst ONE_MB = ONE_KB * 1024\r\n\r\n/**\r\n * 创建项, 如不传入参数则创建空项\r\n * status 状态转换说明:\r\n *  - 如果不传入参数, 创建上传空项, status: input\r\n *  - 如果只传入 data, 不传入 oldData\r\n *    - data 是本地数据(数据中是否携带id), status: new\r\n *    - data 不是本地数据(来源可能是初始化或是其他), status 与原状态保持一致, 如果没有原状态就是 init\r\n *  - data 与 oldData 都传入\r\n *    - data 为本地数据, oldData 是 input/new, status: new\r\n *    - data 为本地数据, oldData 是 init/edit, status: edit\r\n *    - data 不是本地数据, status 与原状态保持一致, 如果没有原状态就是 init\r\n * @returns {Item}\r\n */\r\nfunction createItem(data = null, oldData = {}) {\r\n  let item = {\r\n    loading: false,\r\n    id: createId(),\r\n    status: 'input', // new/edit/del/init/input\r\n    src: '', // 图像相对地址\r\n    display: '', // 图像完整地址, 用于显示\r\n    imgId: '', // 图像资源 id\r\n  }\r\n  // 未传入data, 说明是单纯新建, 单纯新建的值是输入框状态\r\n  if (!data) {\r\n    return item\r\n  }\r\n  // 判断是否是本地图片\r\n  if (data.file && !data.id) {\r\n    if (!isEmptyObj(oldData)) {\r\n      // 如果旧数据状态是输入框, 则为新图片\r\n      if (oldData.status === 'input' || oldData.status === 'new') {\r\n        item.status = 'new'\r\n      }\r\n      // 如果旧数据状态是初始化 init, 则为修改\r\n      if (oldData.status === 'init' || oldData.status === 'edit') {\r\n        item.status = 'edit'\r\n      }\r\n    } else {\r\n      item.status = 'new'\r\n    }\r\n\r\n    // 本地数据初始化\r\n    item.id = oldData.id || item.id\r\n    item.src = ''\r\n    item.imgId = ''\r\n    item.display = data.localSrc || item.display\r\n    item = Object.assign({}, data, item)\r\n    return item\r\n  }\r\n\r\n  // 存在id, 说明是传入已存在数据\r\n  item.id = data.id\r\n  item.imgId = data.imgId || item.imgId\r\n  item.src = data.src || item.src\r\n  item.display = data.display || item.display\r\n  item.status = data.status || 'init'\r\n  item = Object.assign({}, data, item)\r\n  return item\r\n}\r\n\r\n/**\r\n * 获取范围类型限制的提示文本\r\n * @param {String} prx 提示前缀\r\n * @param {Number} min 范围下限\r\n * @param {Number} max 范围上限\r\n * @param {String} unit 单位\r\n */\r\nfunction getRangeTip(prx, min, max, unit = '') {\r\n  let str = prx\r\n  if (min && max) {\r\n    // 有范围限制\r\n    str += ` ${min}${unit}~${max}${unit}`\r\n  } else if (min) {\r\n    // 只有最小范围\r\n    str += ` ≥ ${min}${unit}`\r\n  } else if (max) {\r\n    // 只有最大范围\r\n    str += ` ≤ ${max}${unit}`\r\n  } else {\r\n    // 无限制\r\n    str += '无限制'\r\n  }\r\n  return str\r\n}\r\n\r\n/** for originUpload: 一次请求最多的文件数量 */\r\nconst uploadLimit = 10\r\n/** for originUpload: 文件对象缓存 */\r\nlet catchData = []\r\n/** for originUpload: 计时器缓存 */\r\nlet time\r\n\r\nexport default {\r\n  name: 'UploadImgs',\r\n  data() {\r\n    return {\r\n      itemList: [],\r\n      loading: false,\r\n      currentId: '', // 正在操作项的id\r\n      globalImgPriview: '$imagePreview', // 全局图片预览方法名\r\n    }\r\n  },\r\n  props: {\r\n    /** 每一项宽度 */\r\n    width: {\r\n      type: [Number, String],\r\n      default: 160,\r\n    },\r\n    /** 每一项高度 */\r\n    height: {\r\n      type: [Number, String],\r\n      default: 160,\r\n    },\r\n    /** 是否开启自动上传 */\r\n    autoUpload: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n    /** 初始化数据 */\r\n    value: {\r\n      type: Array,\r\n      default: () => [],\r\n    },\r\n    /** 接受的文件类型 */\r\n    accept: {\r\n      type: String,\r\n      default: 'image/*',\r\n    },\r\n    /** 最少图片数量 */\r\n    minNum: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n    /** 最多图片数量, 0 表示无限制 */\r\n    maxNum: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n    /** 是否可排序 */\r\n    sortable: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    /** 是否可预览 */\r\n    preview: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n    /** 是否可以一次多选 */\r\n    multiple: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    /** 图像验证规则 */\r\n    rules: {\r\n      type: [Object, Function],\r\n      default: () => ({\r\n        maxSize: 2,\r\n      }),\r\n    },\r\n    /** 是否禁用, 禁用后只可展示 不可进行编辑操作, 包括: 新增, 修改, 删除, 改变顺序 */\r\n    disabled: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    /** 上传前插入方法, 属于高级用法 */\r\n    beforeUpload: {\r\n      type: Function,\r\n      default: null,\r\n    },\r\n    /** 重写上传方法, 如果重写则覆盖组件内上传方法 */\r\n    remoteFuc: {\r\n      type: Function,\r\n      default: null,\r\n    },\r\n    /** 图像显示模式 */\r\n    fit: {\r\n      type: String,\r\n      default: 'contain',\r\n    },\r\n    /** 检测是否是动图 */\r\n    animatedCheck: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n  },\r\n  computed: {\r\n    /** 每项容器样式 */\r\n    boxStyle() {\r\n      const { width, height, disabled } = this\r\n      const style = {}\r\n      if (typeof width === 'number') {\r\n        style.width = `${width}px`\r\n      } else if (typeof width === 'string') {\r\n        style.width = width\r\n      }\r\n      if (typeof height === 'number') {\r\n        style.height = `${height}px`\r\n      } else if (typeof height === 'string') {\r\n        style.height = height\r\n      }\r\n      if (disabled) {\r\n        style.cursor = 'not-allowed'\r\n      } else {\r\n        style.cursor = 'pointer'\r\n      }\r\n\r\n      /** 提示字体最大尺寸 */\r\n      let fontSize = 12\r\n      /** 每行提示预设 */\r\n      const maxText = 8\r\n      if (typeof width === 'number' && width / maxText < fontSize) {\r\n        fontSize = (width / maxText).toFixed(2)\r\n      }\r\n      style.fontSize = `${fontSize}px`\r\n      style.textAlign = 'center'\r\n      style.position = 'relative'\r\n      style.display = 'flex'\r\n      style.alignItems = 'center'\r\n      style.justifyContent = 'center'\r\n      style.overflow = 'hidden'\r\n      style.lineHeight = '1.3'\r\n      style.flexDirection = 'column'\r\n\r\n      return style\r\n    },\r\n    /**\r\n     * 上传图像数量下限\r\n     * @returns {Number}\r\n     */\r\n    min() {\r\n      const { minNum } = this\r\n      return minNum < 0 ? 0 : parseInt(minNum, 10)\r\n    },\r\n    /**\r\n     * 上传图像数量上限\r\n     * @returns {Number}\r\n     */\r\n    max() {\r\n      const { min, maxNum } = this\r\n      // 兼容用最大值小于最小值情况\r\n      return maxNum < min ? min : parseInt(maxNum, 10)\r\n    },\r\n    /**\r\n     * 是否是固定数量(最小等于最大)\r\n     * @returns {Boolean}\r\n     */\r\n    isStable() {\r\n      const { min, max } = this\r\n      return max !== 0 && min === max\r\n    },\r\n    /** 构造图像规范提示 */\r\n    rulesTip() {\r\n      const { rules } = this\r\n      const tips = []\r\n\r\n      /** 图像验证规则 */\r\n      let basicRule\r\n      // 针对动态规则模式, 获取输入为空时的规则\r\n      // 动态规则 rule 为函数, 当选择图片后根据选择的图片生成校验规则\r\n      if (typeof rules === 'function') {\r\n        try {\r\n          basicRule = rules()\r\n        } catch (err) {\r\n          basicRule = {}\r\n        }\r\n      } else {\r\n        basicRule = rules || {}\r\n      }\r\n\r\n      // 宽高限制提示语\r\n      if (basicRule.width && basicRule.height) {\r\n        // 固定宽高限制\r\n        tips.push(`宽高 ${basicRule.width}x${basicRule.height}`)\r\n      } else if (basicRule.width) {\r\n        // 固定宽限制\r\n        tips.push(`宽度 ${basicRule.width}`)\r\n        tips.push(`${getRangeTip('高度', basicRule.minHeight, basicRule.maxHeight)}`)\r\n      } else if (basicRule.height) {\r\n        // 固定高限制\r\n        tips.push(`高度 ${basicRule.height}`)\r\n        tips.push(`${getRangeTip('宽度', basicRule.minWidth, basicRule.maxWidth)}`)\r\n      } else {\r\n        // 宽高都不固定\r\n        tips.push(`${getRangeTip('宽度', basicRule.minWidth, basicRule.maxWidth)}`)\r\n        tips.push(`${getRangeTip('高度', basicRule.minHeight, basicRule.maxHeight)}`)\r\n      }\r\n\r\n      // 宽高比限制提示语\r\n      if (basicRule.ratio) {\r\n        if (Array.isArray(basicRule.ratio)) {\r\n          tips.push(`宽高比 ${basicRule.ratio.join(':')}`)\r\n        } else {\r\n          tips.push(`宽高比 ${basicRule.ratio}`)\r\n        }\r\n      }\r\n\r\n      // 文件大小\r\n      if (basicRule.minSize || basicRule.maxSize) {\r\n        tips.push(getRangeTip('文件大小', basicRule.minSize, basicRule.maxSize, 'Mb'))\r\n      }\r\n\r\n      // 是否动态图\r\n      if (basicRule.allowAnimated && basicRule.allowAnimated > 0) {\r\n        if (basicRule.allowAnimated === 1) {\r\n          tips.push('不允许上传动图')\r\n        } else if (basicRule.allowAnimated === 1) {\r\n          tips.push('只允许上传动图')\r\n        }\r\n      }\r\n\r\n      return tips\r\n    },\r\n  },\r\n  watch: {\r\n    /** 初始化值修改时重新初始化, 并且清空当前的编辑状态 */\r\n    value(val) {\r\n      // 初始化数据\r\n      this.initItemList(val)\r\n    },\r\n  },\r\n  mounted() {\r\n    this.initItemList(this.value)\r\n  },\r\n  methods: {\r\n    /**\r\n     * 上传缓存中的图片\r\n     * @param {Array} uploadList 需要上传的缓存集合, 集合中包含回调函数\r\n     */\r\n    uploadCatch(uploadList) {\r\n      const data = {}\r\n      uploadList.forEach((item, index) => {\r\n        data[`file_${index}`] = item.img.file\r\n      })\r\n      return this.$axios({\r\n        method: 'post',\r\n        url: '/cms/file',\r\n        data,\r\n      })\r\n        .then(res => {\r\n          if (!Array.isArray(res) || res.length === 0) {\r\n            throw new Error('图像上传失败')\r\n          }\r\n\r\n          const resObj = res.reduce((acc, item) => {\r\n            acc[item.key] = item\r\n            return acc\r\n          }, {})\r\n\r\n          uploadList.forEach((item, index) => {\r\n            const remoteData = resObj[`file_${index}`]\r\n            item.cb(remoteData)\r\n          })\r\n        })\r\n        .catch(err => {\r\n          uploadList.forEach(item => {\r\n            item.cb(false)\r\n          })\r\n          let msg = '图像上传失败, 请重试'\r\n          if (err.message) {\r\n            // eslint-disable-next-line\r\n            msg = err.message\r\n          }\r\n          console.error(err)\r\n          this.$message.error(msg)\r\n        })\r\n    },\r\n    /**\r\n     * 内置上传文件方法, 使用 debounce 优化提交效率\r\n     * 此处只能使用回调模式, 因为涉及 debounce 处理, promise 不可在外部改变其状态\r\n     * @param {Object} img 需要上传的数据项\r\n     * @param {Function} cb 回调函数\r\n     */\r\n    originUpload(img, cb) {\r\n      // 并且一次最多上传文件数量设为可配置\r\n      // 添加缓存\r\n      catchData.push({\r\n        img,\r\n        cb,\r\n      })\r\n\r\n      // 等于上限, 立即上传\r\n      if (catchData.length === uploadLimit) {\r\n        const data = [...catchData]\r\n        catchData = []\r\n        clearTimeout(time)\r\n        time = null\r\n        return this.uploadCatch(data)\r\n      }\r\n\r\n      // 清除上次一的定时器\r\n      if (time && catchData.length < uploadLimit) {\r\n        clearTimeout(time)\r\n        // 此时修改上一个 promise 状态为reslove\r\n      }\r\n\r\n      // 等待100ms\r\n      time = setTimeout(() => {\r\n        this.uploadCatch([...catchData])\r\n        catchData = []\r\n        time = null\r\n      }, 50)\r\n    },\r\n    /**\r\n     * 上传图像文件\r\n     * @param {Object} 需要上传的项, 包含文化和其它信息\r\n     */\r\n    async uploadImg(item) {\r\n      // 远程结果处理\r\n      const reduceResult = (imgItem, res) => {\r\n        // eslint-disable-next-line\r\n        imgItem.loading = false\r\n        if (!res) {\r\n          return\r\n        }\r\n        // eslint-disable-next-line\r\n        imgItem.display = res.url\r\n        // eslint-disable-next-line\r\n        imgItem.src = res.path\r\n        // eslint-disable-next-line\r\n        imgItem.imgId = res.id\r\n        // eslint-disable-next-line\r\n        imgItem.file = null\r\n        window.URL.revokeObjectURL(imgItem.display)\r\n      }\r\n\r\n      if (item.status === 'input' || !item.file) {\r\n        return\r\n      }\r\n      // eslint-disable-next-line\r\n      item.loading = true\r\n      if (this.beforeUpload && typeof this.beforeUpload === 'function') {\r\n        if (typeof this.beforeUpload === 'function') {\r\n          const result = await new Promise(resolve => {\r\n            let beforeUploadResult\r\n            try {\r\n              beforeUploadResult = this.beforeUpload(item, data => {\r\n                resolve(!!data)\r\n              })\r\n            } catch (err) {\r\n              resolve(false)\r\n            }\r\n            // promise 模式\r\n            if (beforeUploadResult != null && typeof beforeUploadResult.then === 'function') {\r\n              beforeUploadResult\r\n                .then(remoteData => {\r\n                  resolve(!!remoteData)\r\n                })\r\n                .catch(() => {\r\n                  resolve(false)\r\n                })\r\n            }\r\n          })\r\n          if (!result) {\r\n            reduceResult(item, false)\r\n            return false\r\n          }\r\n        }\r\n      }\r\n      // 如果是用户自定义方法\r\n      // 出于简化 api 的考虑, 只允许单个文件上传, 不进行代理\r\n      if (this.remoteFuc && typeof this.remoteFuc === 'function') {\r\n        const result = await new Promise(resolve => {\r\n          let remoteFucResult\r\n          try {\r\n            remoteFucResult = this.remoteFuc(item.file, remoteData => {\r\n              resolve(remoteData || false)\r\n            })\r\n          } catch (err) {\r\n            this.$message.error('执行自定义上传出错')\r\n            resolve(false)\r\n          }\r\n          // promise 模式\r\n          if (remoteFucResult != null && typeof remoteFucResult.then === 'function') {\r\n            remoteFucResult\r\n              .then(remoteData => {\r\n                resolve(remoteData || false)\r\n              })\r\n              .catch(() => {\r\n                resolve(false)\r\n              })\r\n          }\r\n        })\r\n        reduceResult(item, result)\r\n        if (!result) {\r\n          return false\r\n        }\r\n        return item\r\n      }\r\n\r\n      // 使用内置上传\r\n      return new Promise(resolve => {\r\n        this.originUpload(item, data => {\r\n          reduceResult(item, data)\r\n          if (!data) {\r\n            resolve(false)\r\n          } else {\r\n            resolve(item)\r\n          }\r\n        })\r\n      })\r\n    },\r\n    /**\r\n     * 获取当前组件数据\r\n     */\r\n    async getValue() {\r\n      const { itemList, isStable, min } = this\r\n\r\n      // 检查是否有不符合要求的空项\r\n      const l = isStable ? itemList.length : itemList.length - 1\r\n      for (let i = 0; i < l; i += 1) {\r\n        if (itemList[i].status === 'input') {\r\n          this.$message.error('当前存在未选择图片, 请全部选择')\r\n          return false\r\n        }\r\n      }\r\n      if (l < min) {\r\n        this.$message.error(`至少选择${min}张图片`)\r\n        return false\r\n      }\r\n      // 提取需要上传文件\r\n      const asyncList = []\r\n\r\n      for (let i = 0; i < itemList.length; i += 1) {\r\n        // 跳过上传组件\r\n        if (itemList[i].status !== 'input') {\r\n          if (!itemList[i].file) {\r\n            asyncList.push(Promise.resolve(itemList[i]))\r\n          } else {\r\n            // 上传文件后获取对应key值\r\n            asyncList.push(this.uploadImg(itemList[i]))\r\n          }\r\n        }\r\n      }\r\n      const imgInfoList = await Promise.all(asyncList)\r\n      // const imgInfoList = this.itemList.filter(item => (item.status !== 'input'))\r\n\r\n      // 检查是否有上传失败的图像\r\n      // 如果有失败的上传, 则返回错误\r\n      if (imgInfoList.some(item => !item)) {\r\n        return false\r\n      }\r\n\r\n      // 如无错误, 表示图像都以上传, 开始构造数据\r\n      /**\r\n       * @type {array<ReturnItem>}\r\n       */\r\n      const result = imgInfoList.map(item => {\r\n        /** @type {ReturnItem} */\r\n        const val = {\r\n          id: item.status === 'new' ? '' : item.id,\r\n          imgId: item.imgId || null,\r\n          src: item.src || null,\r\n          display: item.display,\r\n          width: item.width || null,\r\n          height: item.height || null,\r\n          fileSize: item.size || null,\r\n          fileName: item.name || null,\r\n          fileType: item.type || null,\r\n          isAnimated: item.isAnimated || null,\r\n        }\r\n        return val\r\n      })\r\n      // 获取数据成功后发出\r\n      this.$emit('upload', result)\r\n      return result\r\n    },\r\n    /**\r\n     * 删除某项\r\n     * @param {Number|String} id 删除项 id\r\n     */\r\n    delItem(id) {\r\n      const { itemList, isStable } = this\r\n      // 根据id找到对应项\r\n      const index = itemList.findIndex(item => item.id === id)\r\n      const blobUrl = itemList[index].display\r\n      if (isStable) {\r\n        // 固定数量图片, 删除后留下空项\r\n        itemList[index] = createItem()\r\n        this.itemList = [...itemList]\r\n      } else {\r\n        itemList.splice(index, 1)\r\n      }\r\n      // 释放内存\r\n      window.URL.revokeObjectURL(blobUrl)\r\n      this.initItemList(this.itemList)\r\n    },\r\n    /**\r\n     * 预览图像\r\n     * @param {Object} data 需要预览的项的数据\r\n     * @param {Number} index 索引序号\r\n     */\r\n    previewImg(data, index) {\r\n      // 如果有全局预览方法\r\n      if (this[this.globalImgPriview]) {\r\n        const images = []\r\n        this.itemList.forEach(element => {\r\n          if (element.display) {\r\n            images.push(element.display)\r\n          }\r\n        })\r\n        this[this.globalImgPriview]({\r\n          images,\r\n          index,\r\n        })\r\n      } else {\r\n        // element 原生粗糙模式\r\n        this.$confirm(`<img src=\"${data.display}\" style=\"width: 100%;\" />`, '预览', {\r\n          dangerouslyUseHTMLString: true,\r\n        })\r\n      }\r\n    },\r\n    /**\r\n     * 移动图像位置\r\n     * @param {Number|String} id 操作项的 id\r\n     * @param {Number} step 移动的偏移量\r\n     */\r\n    move(id, step) {\r\n      const { itemList, isStable } = this\r\n      // 找到操作的元素\r\n      const index = itemList.findIndex(item => item.id === id)\r\n      // 边界检测\r\n      if (index + step < 0 || index + step >= itemList.length) return\r\n      // 非固定项时, 不可和最后一项输入换位子\r\n      if (!isStable && index + step === itemList.length - 1) {\r\n        if (itemList[itemList.length - 1].status === 'input') return\r\n      }\r\n      const i = itemList[index]\r\n      const j = itemList[index + step]\r\n      itemList[index] = j\r\n      itemList[index + step] = i\r\n      this.itemList = [...itemList]\r\n    },\r\n    /**\r\n     * 验证上传的图像是否符合要求\r\n     * @param {LocalFileInfo} imgInfo 图像信息, 包括文件名, 宽高\r\n     */\r\n    async validateImg(imgInfo) {\r\n      const { rules } = this\r\n      /** @type ValidateRule */\r\n      let rule\r\n      // 针对动态规则模式, 获取输入为空时的规则\r\n      // 动态规则 rule 为函数, 当选择图片后根据选择的图片生成校验规则\r\n      if (typeof rules === 'function') {\r\n        try {\r\n          rule = rules(imgInfo)\r\n        } catch (err) {\r\n          rule = {}\r\n        }\r\n      } else {\r\n        rule = rules\r\n      }\r\n\r\n      if (rule.allowAnimated && rule.allowAnimated > 0) {\r\n        if (imgInfo.isAnimated === null) {\r\n          this.$message.error('要进行是否动图验证需要配置 \"animated-check\" 属性为 true')\r\n        } else {\r\n          if (rule.allowAnimated === 1 && imgInfo.isAnimated) {\r\n            throw new Error(`\"${imgInfo.name}\"为动态图, 不允许上传`)\r\n          }\r\n          if (rule.allowAnimated === 2 && !imgInfo.isAnimated) {\r\n            throw new Error(`\"${imgInfo.name}\"为静态图, 只允许上传动态图`)\r\n          }\r\n        }\r\n      }\r\n\r\n      // 宽高限制\r\n      if (rule.width) {\r\n        if (imgInfo.width !== rule.width) {\r\n          throw new Error(`\"${imgInfo.name}\"图像宽不符合要求, 需为${rule.width}`)\r\n        }\r\n      } else {\r\n        if (rule.minWidth && imgInfo.width < rule.minWidth) {\r\n          throw new Error(`\"${imgInfo.name}\"图像宽不符合要求, 至少为${rule.minWidth}`)\r\n        }\r\n        if (rule.maxWidth && imgInfo.width > rule.maxWidth) {\r\n          throw new Error(`\"${imgInfo.name}\"图像宽不符合要求, 至多为${rule.maxWidth}`)\r\n        }\r\n      }\r\n      if (rule.height) {\r\n        if (imgInfo.height !== rule.height) {\r\n          throw new Error(`\"${imgInfo.name}\"图像高不符合要求, 需为${rule.height}`)\r\n        }\r\n      } else {\r\n        if (rule.minHeight && imgInfo.height < rule.minHeight) {\r\n          throw new Error(`\"${imgInfo.name}\"图像高不符合要求, 至少为${rule.minHeight}`)\r\n        }\r\n        if (rule.maxHeight && imgInfo.height > rule.maxHeight) {\r\n          throw new Error(`\"${imgInfo.name}\"图像高不符合要求, 至多为${rule.maxHeight}`)\r\n        }\r\n      }\r\n\r\n      // 宽高比限制提示语\r\n      if (rule.ratio) {\r\n        let ratio\r\n        if (Array.isArray(rule.ratio)) {\r\n          ratio = rule.ratio[0] / rule.ratio[1]\r\n        } else {\r\n          // eslint-disable-next-line\r\n          ratio = rule.ratio\r\n        }\r\n        ratio = ratio.toFixed(2)\r\n        if ((imgInfo.width / imgInfo.height).toFixed(2) !== ratio) {\r\n          throw new Error(`\"${imgInfo.name}\"图像宽高比不符合要求, 需为${ratio}`)\r\n        }\r\n      }\r\n\r\n      // 文件大小\r\n      if (rule.minSize && imgInfo.size < rule.minSize * ONE_MB) {\r\n        throw new Error(`\"${imgInfo.name}\"图像文件大小比不符合要求, 至少为${rule.minSize}Mb`)\r\n      }\r\n      if (rule.maxSize && imgInfo.size > rule.maxSize * ONE_MB) {\r\n        throw new Error(`\"${imgInfo.name}\"图像文件大小比不符合要求, 至多为${rule.maxSize}Mb`)\r\n      }\r\n\r\n      return true\r\n    },\r\n    /**\r\n     * 选择图像文件后处理, 包括获取图像信息, 验证图像等\r\n     * @param {Event} e input change 事件对象\r\n     */\r\n    async handleChange(e) {\r\n      const { currentId, autoUpload } = this\r\n      const { files } = e.target\r\n      let imgInfoList\r\n\r\n      if (!files) return\r\n      /** 中间步骤缓存, 在出错时用于释放 createObjectURL 的内存 */\r\n      let cache = []\r\n      /**\r\n       * 处理单个图片, 返回处理成功的图片数据\r\n       * @param {File} file 图片文件\r\n       */\r\n      const handleImg = async file => {\r\n        try {\r\n          // 获取图像信息\r\n          const info = await this.getImgInfo(file)\r\n          cache.push(info)\r\n          // 验证图像信息\r\n          await this.validateImg(info)\r\n          return info\r\n        } catch (err) {\r\n          // 往外抛异常\r\n          throw err\r\n        }\r\n      }\r\n      const asyncList = []\r\n      for (let i = 0; i < files.length; i += 1) {\r\n        asyncList.push(handleImg(files[i]))\r\n      }\r\n      try {\r\n        imgInfoList = await Promise.all(asyncList)\r\n        // 设置图片信息\r\n        this.setImgInfo(imgInfoList, currentId)\r\n        // 开启自动上传\r\n        if (autoUpload) {\r\n          this.itemList.forEach(ele => {\r\n            this.uploadImg(ele)\r\n          })\r\n        }\r\n      } catch (err) {\r\n        // 清空缓存\r\n        for (let i = 0; i < cache.length; i += 1) {\r\n          window.URL.revokeObjectURL(cache[i].localSrc)\r\n        }\r\n        cache = null\r\n        console.error(err)\r\n        this.$message.error(err.message)\r\n      }\r\n    },\r\n    /**\r\n     * 根据信息列表设置图像信息\r\n     * 用户选择图片, 图片通过验证后可获取到图像信息数组\r\n     * 将这一组图像信息数据设置在 itemList 中\r\n     * @param {Array<LocalFileInfo>} imgInfoList 需要设置的图像数组\r\n     * @param {Number|String} id 操作项的 id\r\n     */\r\n    setImgInfo(imgInfoList = [], currentId) {\r\n      const { max, itemList } = this\r\n      // 找到特定图像位置\r\n      const index = this.itemList.findIndex(item => item.id === currentId)\r\n      // 释放内存\r\n      window.URL.revokeObjectURL(this.itemList[index].display)\r\n      // 替换图片\r\n      this.itemList[index] = createItem(imgInfoList[0], this.itemList[index])\r\n\r\n      // 如果需要设置的图像数量大于1, 需要执行追加图片逻辑\r\n      if (imgInfoList.length > 1) {\r\n        // 最大图片数量限制\r\n        let l = imgInfoList.length\r\n        if (this.isStable) {\r\n          // 固定数量模式, 按次序插入空项\r\n          for (let i = 0, k = 1; i < max && k < l; i += 1) {\r\n            if (itemList[i].status === 'input') {\r\n              this.itemList[i] = createItem(imgInfoList[k])\r\n              k += 1\r\n            }\r\n          }\r\n        } else {\r\n          const empty = max - itemList.length\r\n          if (max && l > empty) {\r\n            l = empty\r\n          }\r\n          if (itemList[itemList.length - 1].status === 'input') {\r\n            this.itemList.pop()\r\n          }\r\n          for (let i = 1; i <= l; i += 1) {\r\n            this.itemList.push(createItem(imgInfoList[i]))\r\n          }\r\n        }\r\n      }\r\n\r\n      // 初始化图片\r\n      this.initItemList(this.itemList)\r\n    },\r\n    /**\r\n     * 支持键盘操作\r\n     * @param {Event} e 键盘事件对象\r\n     * @param {Number|String} id 操作项的 id\r\n     */\r\n    handleKeydown(e, id) {\r\n      if (e.target !== e.currentTarget) return\r\n      if (e.keyCode === 13 || e.keyCode === 32) {\r\n        this.handleClick(id)\r\n      }\r\n    },\r\n    /**\r\n     * 处理点击事件, 并转移到文件上传元素\r\n     * 并记录当前操作元素 id\r\n     * @param {Number|String} id 操作项的 id\r\n     */\r\n    handleClick(id) {\r\n      if (!this.disabled) {\r\n        this.currentId = id || ''\r\n        this.$refs.input.value = null\r\n        this.$refs.input.click()\r\n      }\r\n    },\r\n    /**\r\n     * 初始化 itemList\r\n     * @param {Array} val 初始化的数据数组\r\n     */\r\n    initItemList(val) {\r\n      const { max, isStable, disabled } = this\r\n      const result = []\r\n\r\n      // 初始值不存在情况\r\n      // 包括初始值不合法\r\n      if (!val || !Array.isArray(val) || val.length === 0) {\r\n        // 固定数量图像上传, 直接初始化固定数量的上传控件\r\n        if (isStable) {\r\n          for (let i = 0; i < max; i += 1) {\r\n            result.push(createItem())\r\n          }\r\n          this.itemList = result\r\n          return\r\n        }\r\n        // 如果不是固定上传数量, 则仅创建一个空项\r\n        result.push(createItem())\r\n        this.itemList = result\r\n        return\r\n      }\r\n\r\n      // 存在初始值\r\n      for (let i = 0; i < val.length; i += 1) {\r\n        result.push(createItem(val[i]))\r\n      }\r\n      // 初始项小于最大数量限制, 并且处于可编辑状态, 并且最后一项不是input\r\n      if ((max === 0 || val.length < max) && !disabled && val[val.length - 1].status !== 'input') {\r\n        // 后面添加空项\r\n        result.push(createItem())\r\n      }\r\n      this.itemList = result\r\n    },\r\n    /**\r\n     * 获取图像信息\r\n     * @param {File} file 文件对象\r\n     * @returns {LocalFileInfo} 信息对象\r\n     */\r\n    async getImgInfo(file) {\r\n      const { animatedCheck } = this\r\n      const localSrc = window.URL.createObjectURL(file)\r\n      // 严格检测文件类型\r\n      const fileType = await getFileType(file)\r\n      // 检测是否是动图\r\n      let isAnimated = null\r\n      if (animatedCheck) {\r\n        isAnimated = await checkIsAnimated({ file, fileType, fileUrl: localSrc })\r\n      }\r\n      return new Promise((resolve, reject) => {\r\n        let image = new Image()\r\n        image.src = localSrc\r\n        image.onload = () => {\r\n          /**\r\n           * @type {LocalFileInfo}\r\n           */\r\n          const localFileInfo = {\r\n            localSrc,\r\n            file,\r\n            width: image.width,\r\n            height: image.height,\r\n            name: file.name,\r\n            size: file.size,\r\n            type: fileType === 'unknow' ? file.type : fileType,\r\n            lastModified: file.lastModified,\r\n            isAnimated,\r\n          }\r\n          resolve(localFileInfo)\r\n          image = null\r\n        }\r\n        image.onerror = () => {\r\n          reject(new Error('图像加载失败'))\r\n          image = null\r\n        }\r\n      })\r\n    },\r\n    /** 清空全部图片 */\r\n    clear() {\r\n      this.initItemList([])\r\n      this.getValue()\r\n    },\r\n    /** 重置图片数据传入属性 */\r\n    reset() {\r\n      this.initItemList(this.value)\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.upload-imgs-container {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n\r\n  .upload-item,\r\n  .thumb-item {\r\n    border: 1px dashed #d9d9d9;\r\n    border-radius: 3px;\r\n    transition: all 0.1s;\r\n    color: #666666;\r\n    margin-right: 1em;\r\n    margin-bottom: 1em;\r\n\r\n    &.disabled {\r\n      color: #ababab;\r\n    }\r\n\r\n    &:not(.disabled):hover {\r\n      border-color: #3963bc;\r\n      color: #3963bc;\r\n    }\r\n  }\r\n\r\n  .thumb-item {\r\n    .info {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      position: absolute;\r\n      width: 100%;\r\n      height: 100%;\r\n      top: 0;\r\n      left: 0;\r\n      transition: all 0.3s;\r\n      transition-delay: 0.1s;\r\n\r\n      .wait-upload {\r\n        background: #ffcb71;\r\n        color: white;\r\n        position: absolute;\r\n        display: inline-block;\r\n        width: 1.7em;\r\n        height: 1.5em;\r\n        top: 0;\r\n        right: 0;\r\n        border-radius: 0 0 0 1.4em;\r\n        transition: all 0.1s;\r\n\r\n        &::before {\r\n          font-size: 1.4em;\r\n          position: absolute;\r\n          right: -1px;\r\n          transform: scale(0.7);\r\n        }\r\n      }\r\n    }\r\n\r\n    .control {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      position: absolute;\r\n      width: 100%;\r\n      height: 100%;\r\n      top: 0;\r\n      left: 0;\r\n      opacity: 0;\r\n      background-color: rgba(0, 0, 0, 0.3);\r\n      transition: all 0.3s;\r\n      transition-delay: 0.1s;\r\n\r\n      .del {\r\n        background: #f4516c;\r\n        color: white;\r\n        position: absolute;\r\n        display: inline-block;\r\n        width: 1.7em;\r\n        height: 1.5em;\r\n        top: 0;\r\n        right: 0;\r\n        opacity: 0;\r\n        border-radius: 0 0 0 1.4em;\r\n        transition: all 0.1s;\r\n\r\n        &::before {\r\n          font-size: 1.4em;\r\n          position: absolute;\r\n          right: -1px;\r\n          transform: scale(0.7);\r\n        }\r\n\r\n        &:hover {\r\n          transform: translate(-0.5em, 0.4em) scale(1.5);\r\n        }\r\n      }\r\n\r\n      .preview {\r\n        color: white;\r\n        font-size: 2em;\r\n        transition: all 0.2s;\r\n\r\n        &:hover {\r\n          transform: scale(1.2);\r\n        }\r\n      }\r\n\r\n      .control-bottom {\r\n        position: absolute;\r\n        bottom: 0;\r\n        left: 0;\r\n        width: 100%;\r\n        color: white;\r\n        background-color: rgba(0, 0, 0, 0.3);\r\n        font-size: 1.5em;\r\n        display: flex;\r\n        justify-content: space-around;\r\n        transform: translate(0, 100%);\r\n        transition: all 0.2s;\r\n        transition-delay: 0.1s;\r\n        padding: 5px 0;\r\n\r\n        .control-bottom-btn {\r\n          transform: all 0.2s;\r\n\r\n          &.disabled {\r\n            color: #ababab;\r\n            cursor: not-allowed;\r\n          }\r\n\r\n          &:not(.disabled):hover {\r\n            transform: scale(1.2);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    &:hover {\r\n      .control {\r\n        opacity: 1;\r\n      }\r\n\r\n      .del {\r\n        opacity: 1;\r\n      }\r\n\r\n      .control-bottom {\r\n        transform: translate(0, 0);\r\n      }\r\n    }\r\n  }\r\n\r\n  .upload-imgs__input {\r\n    display: none;\r\n  }\r\n}\r\n</style>\r\n"]}]}