{"remainingRequest":"D:\\DownLoad\\git\\achieve\\AchieveIt-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\DownLoad\\git\\achieve\\AchieveIt-web\\src\\components\\base\\table\\lin-table.vue?vue&type=style&index=0&id=b290e03a&lang=scss&scoped=true&","dependencies":[{"path":"D:\\DownLoad\\git\\achieve\\AchieveIt-web\\src\\components\\base\\table\\lin-table.vue","mtime":1584099524199},{"path":"D:\\DownLoad\\git\\achieve\\AchieveIt-web\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"D:\\DownLoad\\git\\achieve\\AchieveIt-web\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\DownLoad\\git\\achieve\\AchieveIt-web\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\DownLoad\\git\\achieve\\AchieveIt-web\\node_modules\\sass-loader\\lib\\loader.js","mtime":1533139052000},{"path":"D:\\DownLoad\\git\\achieve\\AchieveIt-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\DownLoad\\git\\achieve\\AchieveIt-web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.lin-table {\r\n  position: relative;\r\n}\r\n\r\n.sort-input {\r\n  width: 50px;\r\n  background: none;\r\n  justify-content: space-around;\r\n}\r\n\r\n.table-edit {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  width: 135px;\r\n}\r\n\r\n.cell-edit-input .el-input,\r\n.el-input__inner {\r\n  width: 125px;\r\n}\r\n\r\n.cell-icon {\r\n  cursor: pointer;\r\n  color: #3963bc;\r\n  margin-left: 5px;\r\n}\r\n\r\n.pagination {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-right: -10px;\r\n  margin-top: 15px;\r\n}\r\n",{"version":3,"sources":["lin-table.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiYA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"lin-table.vue","sourceRoot":"src/components/base/table","sourcesContent":["<template>\r\n  <div class=\"lin-table\">\r\n    <el-table\r\n      ref=\"linTable\"\r\n      v-loading=\"loading\"\r\n      stripe\r\n      row-key=\"id\"\r\n      :border=\"border\"\r\n      :data=\"currentData\"\r\n      :highlight-current-row=\"highlightCurrentRow ? true : false\"\r\n      :element-loading-text=\"loadingText\"\r\n      :element-loading-spinner=\"loadingIcon\"\r\n      :element-loading-background=\"loadingBG\"\r\n      :row-class-name=\"rowClassName\"\r\n      @current-change=\"handleCurrentChange\"\r\n      @selection-change=\"handleSelectionChange\"\r\n      @select-all=\"selectAll\"\r\n      @row-click=\"rowClick\"\r\n    >\r\n      <el-table-column v-if=\"type\" :type=\"type\" width=\"55\"></el-table-column>\r\n      <el-table-column v-if=\"index\" :type=\"index\" :index=\"currentIndex\" width=\"55\"></el-table-column>\r\n      <el-table-column\r\n        v-for=\"item in filterTableColumn\"\r\n        :key=\"item.id\"\r\n        :prop=\"item.prop\"\r\n        :label=\"item.label\"\r\n        :show-overflow-tooltip=\"true\"\r\n        :filters=\"item.filters ? item.filters : null\"\r\n        :filter-method=\"item.filterMethod ? item.filterMethod : null\"\r\n        :column-key=\"item.filterMethod ? item.prop : null\"\r\n        :formatter=\"item.formatter ? item.formatter : null\"\r\n        :sortable=\"item.sortable ? item.sortable : false\"\r\n        :fixed=\"item.fixed ? item.fixed : false\"\r\n        :width=\"item.width ? item.width : ''\"\r\n      ></el-table-column>\r\n      <el-table-column v-if=\"operate.length > 0\" label=\"操作\" fixed=\"right\" width=\"175\">\r\n        <template slot-scope=\"scope\">\r\n          <el-button\r\n            v-for=\"(item, index) in operate\"\r\n            :type=\"item.type\"\r\n            plain\r\n            :key=\"index\"\r\n            size=\"mini\"\r\n            v-permission=\"{ permission: item.permission ? item.permission : '', type: 'disabled' }\"\r\n            @click.native.prevent.stop=\"buttonMethods(item.func, scope.$index, scope.row)\"\r\n            >{{ item.name }}</el-button\r\n          >\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n    <el-pagination\r\n      class=\"pagination\"\r\n      v-if=\"pagination\"\r\n      background\r\n      layout=\"prev, pager, next\"\r\n      :page-size=\"pagination.pageSize ? pagination.pageSize : 10\"\r\n      :total=\"pagination.pageTotal ? pagination.pageTotal : null\"\r\n      @current-change=\"currentChange\"\r\n    ></el-pagination>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// import Sortable from 'sortablejs'\r\n// import FileSaver from 'file-saver'\r\n\r\nexport default {\r\n  props: {\r\n    tableColumn: {\r\n      // 表头名称\r\n      type: Array,\r\n      default: () => [],\r\n    },\r\n    tableData: {\r\n      // 表格数据\r\n      type: Array,\r\n      default: () => [],\r\n    },\r\n    operate: {\r\n      // 自定义按键及绑定方法\r\n      type: Array,\r\n      default: () => [],\r\n    },\r\n    customColumn: {\r\n      // 定制要展示的列\r\n      type: Array,\r\n      default: () => [],\r\n    },\r\n    fixedLeftList: {\r\n      // 左侧固定列\r\n      type: Array,\r\n      default: () => [],\r\n    },\r\n    fixedRightList: {\r\n      // 右侧固定列\r\n      type: Array,\r\n      default: () => [],\r\n    },\r\n    type: {\r\n      // 是否开启表格多选\r\n      type: String,\r\n      default: null,\r\n    },\r\n    index: {\r\n      // 是否显示索引\r\n      index: String,\r\n      default: '',\r\n    },\r\n    highlightCurrentRow: {\r\n      // 是否开启表格单选\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    loading: {\r\n      // 动画加载\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    loadingText: {\r\n      // 动画提示\r\n      type: String,\r\n      default: '',\r\n    },\r\n    loadingIcon: {\r\n      // 动画图标\r\n      type: String,\r\n      default: 'el-icon-loading',\r\n    },\r\n    loadingBG: {\r\n      // 动画背景色\r\n      type: String,\r\n      default: 'rgba(255,255,255,0.5)',\r\n    },\r\n    pagination: {\r\n      // 分页\r\n      type: [Object, Boolean],\r\n      default: false,\r\n    },\r\n    border: {\r\n      // 边框\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      filterTableColumn: [], // 定制展示的列\r\n      currentPage: 1, // 当前选中页\r\n      currentData: [], // 每次切换页码的时候要给table传入不同的数据\r\n      selectedTableData: [], // 多选选中的数据\r\n      currentRow: null, // 单选选中的数据\r\n      oldVal: [], // 上一次选中的数据\r\n      oldKey: [], // 上一次选中数据的key\r\n      currentIndex: 1, // 当前索引，切换页面的时候需要重新计算\r\n      rowClassName: '', // 行样式\r\n    }\r\n  },\r\n  created() {},\r\n  beforeMount() {\r\n    // 先放在session里，因为每次切换页码table都会重新渲染，之前选中都数据就丢失了  sessionstorage在create里面打包会提示undefined\r\n    sessionStorage.setItem('selectedTableData', JSON.stringify([]))\r\n  },\r\n  methods: {\r\n    // 开发者自定义的函数\r\n    buttonMethods(func, index, row) {\r\n      const _this = this\r\n      const { methods } = this.$options\r\n      methods[func](_this, index, row)\r\n    },\r\n    // 行内编辑\r\n    handleEdit(_this, index, row) {\r\n      _this.$emit('handleEdit', { index, row })\r\n    },\r\n    // 行内删除\r\n    handleDelete(_this, index, row) {\r\n      _this.$emit('handleDelete', { index, row })\r\n    },\r\n    // 多选-选中checkbox\r\n    toggleSelection(rows, flag) {\r\n      if (rows) {\r\n        rows.forEach(row => {\r\n          this.$refs.linTable.toggleRowSelection(row, flag)\r\n        })\r\n      } else {\r\n        this.$refs.linTable.clearSelection()\r\n      }\r\n    },\r\n    // 全选-取消全选\r\n    selectAll(val) {\r\n      this.oldKey = val.map(item => item.key)\r\n    },\r\n    // 单选\r\n    handleCurrentChange(val, oldVal) {\r\n      this.currentRow = val\r\n      this.$emit('handleCurrentChange', { val, oldVal })\r\n    },\r\n    // 单击某一行\r\n    rowClick(row) {\r\n      // eslint-disable-line\r\n      // 选中-多选\r\n      if (!this.oldKey.includes(row.key)) {\r\n        this.oldKey.push(row.key)\r\n        const data = this.oldVal.concat(row)\r\n        this.handleSelectionChange(data)\r\n        // 选中checkbox\r\n        this.toggleSelection(this.currentData.filter(item => item.key === row.key))\r\n        // 取消选中\r\n      } else {\r\n        this.oldKey = this.oldKey.filter(item => item !== row.key)\r\n        const data = this.oldVal.filter(item => item.key !== row.key)\r\n        this.handleSelectionChange(data)\r\n        this.toggleSelection(this.currentData.filter(item => item.key === row.key), false)\r\n      }\r\n      // 选中-单选\r\n      if (this.currentOldRow && this.currentOldRow.key === row.key) {\r\n        // 取消单选选中\r\n        this.$refs.linTable.setCurrentRow()\r\n        this.currentOldRow = null\r\n        return\r\n      }\r\n      this.currentOldRow = row\r\n    },\r\n    // 切换当前页\r\n    currentChange(page) {\r\n      const currentSelectedData = []\r\n      this.oldVal = []\r\n      this.currentPage = page\r\n      this.selectedTableData = JSON.parse(sessionStorage.getItem('selectedTableData'))\r\n      this.currentData = this.tableData.filter(\r\n        (item, index) => index >= (this.currentPage - 1) * this.pagination.pageSize\r\n          && index < this.currentPage * this.pagination.pageSize,\r\n      ) // eslint-disable-line\r\n      this.$emit('currentChange', page)\r\n      // 已选中的数据打勾\r\n      this.selectedTableData.forEach(item => {\r\n        for (let i = 0; i < this.currentData.length; i++) {\r\n          if (this.currentData[i].key === item.key) {\r\n            // 切换页码重新计算oldVal\r\n            this.oldVal.push(this.currentData[i])\r\n            // 需要打勾的数据\r\n            currentSelectedData.push(this.currentData[i])\r\n          }\r\n        }\r\n      })\r\n      this.$nextTick(() => {\r\n        this.toggleSelection(currentSelectedData)\r\n      })\r\n      // 切换行索引\r\n      this.currentIndex = (this.currentPage - 1) * this.pagination.pageSize + 1\r\n    },\r\n    // checkbox触发函数\r\n    handleSelectionChange(val) {\r\n      const valKeys = val.map(item => item.key)\r\n      const oldValKeys = this.oldVal.map(item => item.key)\r\n      this.selectedTableData = JSON.parse(sessionStorage.getItem('selectedTableData'))\r\n      // 一条数据都没选中\r\n      if (this.selectedTableData.length === 0) {\r\n        this.selectedTableData = this.selectedTableData.concat(val)\r\n        this.$emit('selection-change', this.selectedTableData)\r\n        this.oldVal = [...val]\r\n        sessionStorage.setItem('selectedTableData', JSON.stringify(this.selectedTableData))\r\n        return\r\n      }\r\n      // 判断是选中数据还是取消选中\r\n      if (valKeys.length < oldValKeys.length) {\r\n        const delKey = oldValKeys.filter(item => !valKeys.includes(item))\r\n        this.selectedTableData = this.selectedTableData.filter(item => !delKey.includes(item.key))\r\n        this.$emit('selection-change', this.selectedTableData)\r\n      } else {\r\n        const addKey = valKeys.filter(item => !oldValKeys.includes(item))\r\n        const addVal = val.filter(item => addKey.includes(item.key))\r\n        this.selectedTableData = this.selectedTableData.concat(addVal)\r\n        this.$emit('selection-change', this.selectedTableData)\r\n      }\r\n      sessionStorage.setItem('selectedTableData', JSON.stringify(this.selectedTableData))\r\n      this.oldVal = [...val]\r\n    },\r\n    // 拖拽\r\n    // setDrag() {\r\n    //   const el = document.querySelectorAll('.el-table__body-wrapper > table > tbody')[0]\r\n    //   this.rowClassName = 'rowClassName' // 设置行样式，添加移动手势\r\n    //   this.sortable = Sortable.create(el, {\r\n    //     setData(dataTransfer) {\r\n    //       dataTransfer.setData('Text', '')\r\n    //     },\r\n    //     onEnd: (evt) => {\r\n    //       const dragData = [...this.currentData]\r\n    //       let { oldIndex, newIndex } = evt\r\n    //       if (this.pagination) {\r\n    //         oldIndex = evt.oldIndex * this.currentPage\r\n    //         newIndex = evt.newIndex * this.currentPage\r\n    //       }\r\n    //       dragData[oldIndex] = this.currentData[newIndex]\r\n    //       dragData[newIndex] = this.currentData[oldIndex]\r\n    //       this.$emit('getDragData', { dragData, oldIndex, newIndex })\r\n    //     },\r\n    //   })\r\n    // },\r\n    // 导出excel\r\n    // exportExcel(fileName = 'sheet') {\r\n    //   const targetTable = this.$XLSX.utils.table_to_book(document.querySelectorAll('.el-table__body-wrapper > table')[0])\r\n    //   const writeTable = this.$XLSX.write(targetTable, { bookType: 'xlsx', bookSST: true, type: 'array' })\r\n    //   try {\r\n    //     FileSaver.saveAs(new Blob([writeTable], { type: 'application/octet-stream' }), `${fileName}.xlsx`)\r\n    //   } catch (e) { if (typeof console !== 'undefined') console.log(e, writeTable) }\r\n    //   return writeTable\r\n    // },\r\n    // 导出csv\r\n    // exportCsv(fileName = 'sheet') {\r\n    //   const targetTable = this.$XLSX.utils.table_to_book(document.querySelectorAll('.el-table__body-wrapper > table')[0])\r\n    //   const writeTable = this.$XLSX.write(targetTable, { bookType: 'csv', bookSST: true, type: 'array' })\r\n    //   try {\r\n    //     FileSaver.saveAs(new Blob([writeTable], { type: 'application/octet-stream' }), `${fileName}.csv`)\r\n    //   } catch (e) { if (typeof console !== 'undefined') console.log(e, writeTable) }\r\n    //   return writeTable\r\n    // },\r\n  },\r\n  watch: {\r\n    fixedLeftList: {\r\n      handler() {\r\n        // eslint-disable-line\r\n        this.filterTableColumn.map((item, index) => {\r\n          if (this.fixedLeftList.indexOf(item.label) > -1) {\r\n            this.$set(this.filterTableColumn[index], 'fixed', 'left')\r\n          } else if (this.fixedRightList.indexOf(item.label) === -1) {\r\n            this.$set(this.filterTableColumn[index], 'fixed', false)\r\n          }\r\n          return ''\r\n        })\r\n      },\r\n      deep: true,\r\n      immediate: true,\r\n    },\r\n    fixedRightList: {\r\n      handler() {\r\n        // eslint-disable-line\r\n        this.filterTableColumn.map((item, index) => {\r\n          if (this.fixedRightList.indexOf(item.label) > -1) {\r\n            this.$set(this.filterTableColumn[index], 'fixed', 'right')\r\n          } else if (this.fixedLeftList.indexOf(item.label) === -1) {\r\n            this.$set(this.filterTableColumn[index], 'fixed', false)\r\n          }\r\n          return ''\r\n        })\r\n      },\r\n      deep: true,\r\n      immediate: true,\r\n    },\r\n    customColumn: {\r\n      handler(val) {\r\n        if (val.length > 1) {\r\n          this.filterTableColumn = this.tableColumn.filter(v => val.indexOf(v.label) > -1)\r\n        }\r\n      },\r\n      deep: true,\r\n    },\r\n    tableData: {\r\n      handler() {\r\n        // 传了分页配置\r\n        if (this.pagination && this.pagination.pageSize) {\r\n          this.currentData = this.tableData.filter((item, index) => index < this.pagination.pageSize)\r\n        } else {\r\n          this.currentData = this.tableData\r\n        }\r\n      },\r\n      deep: true,\r\n      immediate: true,\r\n    },\r\n    tableColumn: {\r\n      handler() {\r\n        // 如果一开始没有传要展示的列 就默认全展示\r\n        if (this.customColumn.length > 1) {\r\n          this.filterTableColumn = this.tableColumn.filter(v => this.customColumn.indexOf(v.label) > -1)\r\n        } else {\r\n          this.filterTableColumn = this.tableColumn\r\n        }\r\n      },\r\n      deep: true,\r\n      immediate: true,\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.lin-table {\r\n  position: relative;\r\n}\r\n\r\n.sort-input {\r\n  width: 50px;\r\n  background: none;\r\n  justify-content: space-around;\r\n}\r\n\r\n.table-edit {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  width: 135px;\r\n}\r\n\r\n.cell-edit-input .el-input,\r\n.el-input__inner {\r\n  width: 125px;\r\n}\r\n\r\n.cell-icon {\r\n  cursor: pointer;\r\n  color: #3963bc;\r\n  margin-left: 5px;\r\n}\r\n\r\n.pagination {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-right: -10px;\r\n  margin-top: 15px;\r\n}\r\n</style>\r\n\r\n<style>\r\n.lin-table .rowClassName {\r\n  cursor: move !important;\r\n}\r\n</style>\r\n"]}]}